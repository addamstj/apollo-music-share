{"ast":null,"code":"import ApolloClient from \"apollo-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { gql } from \"apollo-boost\";\nimport { GET_QUEUED_SONGS } from \"./queries\"; // import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  link: new WebSocketLink({\n    uri: \"wss://apollo-music-share4.herokuapp.com/v1/graphql\",\n    options: {\n      reconnect: true\n    }\n  }),\n  cache: new InMemoryCache(),\n  typeDefs: gql`\n    type Song {\n      id: uuid!\n      title: String!\n      artist: String!\n      thumbnail: String!\n      duration: Float!\n      url: String!\n    }\n\n    input SongInput {\n      id: uuid!\n      title: String!\n      artist: String!\n      thumbnail: String!\n      duration: Float!\n      url: String!\n    }\n\n    type Query {\n      queue: [Song]!\n    }\n\n    type Mutation {\n      addOrRemoveFromQueue(input: SongInput!): [Song]!\n    }\n  `,\n  resolvers: {\n    Mutation: {\n      addOrRemoveFromQueue: (_, {\n        input\n      }, {\n        cache\n      }) => {\n        const queryResult = cache.readQuery({\n          query: GET_QUEUED_SONGS\n        });\n\n        if (queryResult) {\n          const {\n            queue\n          } = queryResult;\n          const isInQueue = queue.some(song => song.id === input.id);\n          const newQueue = isInQueue ? queue.filter(song => song.id !== input.id) : [...queue, input];\n          cache.writeQuery({\n            query: GET_QUEUED_SONGS,\n            data: {\n              queue: newQueue\n            }\n          });\n          return newQueue;\n        }\n\n        return [];\n      }\n    }\n  }\n});\nconst hasQueue = Boolean(localStorage.getItem(\"queue\"));\nconst data = {\n  queue: hasQueue ? JSON.parse(localStorage.getItem(\"queue\")) : []\n};\nclient.writeData({\n  data\n});\nexport default client;","map":{"version":3,"sources":["/Users/tjaddams/Downloads/apollo-music-share-final-code/src/graphql/client.js"],"names":["ApolloClient","WebSocketLink","InMemoryCache","gql","GET_QUEUED_SONGS","client","link","uri","options","reconnect","cache","typeDefs","resolvers","Mutation","addOrRemoveFromQueue","_","input","queryResult","readQuery","query","queue","isInQueue","some","song","id","newQueue","filter","writeQuery","data","hasQueue","Boolean","localStorage","getItem","JSON","parse","writeData"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,gBAAT,QAAiC,WAAjC,C,CACA;;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,IAAI,EAAE,IAAIL,aAAJ,CAAkB;AACtBM,IAAAA,GAAG,EAAE,oDADiB;AAEtBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ;AAFa,GAAlB,CADwB;AAO9BC,EAAAA,KAAK,EAAE,IAAIR,aAAJ,EAPuB;AAQ9BS,EAAAA,QAAQ,EAAER,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;GARgB;AAmC9BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,oBAAoB,EAAE,CAACC,CAAD,EAAI;AAAEC,QAAAA;AAAF,OAAJ,EAAe;AAAEN,QAAAA;AAAF,OAAf,KAA6B;AACjD,cAAMO,WAAW,GAAGP,KAAK,CAACQ,SAAN,CAAgB;AAClCC,UAAAA,KAAK,EAAEf;AAD2B,SAAhB,CAApB;;AAGA,YAAIa,WAAJ,EAAiB;AACf,gBAAM;AAAEG,YAAAA;AAAF,cAAYH,WAAlB;AACA,gBAAMI,SAAS,GAAGD,KAAK,CAACE,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,KAAK,CAACQ,EAArC,CAAlB;AACA,gBAAMC,QAAQ,GAAGJ,SAAS,GACtBD,KAAK,CAACM,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,KAAK,CAACQ,EAAvC,CADsB,GAEtB,CAAC,GAAGJ,KAAJ,EAAWJ,KAAX,CAFJ;AAGAN,UAAAA,KAAK,CAACiB,UAAN,CAAiB;AACfR,YAAAA,KAAK,EAAEf,gBADQ;AAEfwB,YAAAA,IAAI,EAAE;AAAER,cAAAA,KAAK,EAAEK;AAAT;AAFS,WAAjB;AAIA,iBAAOA,QAAP;AACD;;AACD,eAAO,EAAP;AACD;AAlBO;AADD;AAnCmB,CAAjB,CAAf;AA2DA,MAAMI,QAAQ,GAAGC,OAAO,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAxB;AAEA,MAAMJ,IAAI,GAAG;AACXR,EAAAA,KAAK,EAAES,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAH,GAA+C;AADnD,CAAb;AAGA3B,MAAM,CAAC8B,SAAP,CAAiB;AAAEP,EAAAA;AAAF,CAAjB;AAEA,eAAevB,MAAf","sourcesContent":["import ApolloClient from \"apollo-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { gql } from \"apollo-boost\";\nimport { GET_QUEUED_SONGS } from \"./queries\";\n// import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  link: new WebSocketLink({\n    uri: \"wss://apollo-music-share4.herokuapp.com/v1/graphql\",\n    options: {\n      reconnect: true\n    }\n  }),\n  cache: new InMemoryCache(),\n  typeDefs: gql`\n    type Song {\n      id: uuid!\n      title: String!\n      artist: String!\n      thumbnail: String!\n      duration: Float!\n      url: String!\n    }\n\n    input SongInput {\n      id: uuid!\n      title: String!\n      artist: String!\n      thumbnail: String!\n      duration: Float!\n      url: String!\n    }\n\n    type Query {\n      queue: [Song]!\n    }\n\n    type Mutation {\n      addOrRemoveFromQueue(input: SongInput!): [Song]!\n    }\n  `,\n  resolvers: {\n    Mutation: {\n      addOrRemoveFromQueue: (_, { input }, { cache }) => {\n        const queryResult = cache.readQuery({\n          query: GET_QUEUED_SONGS\n        });\n        if (queryResult) {\n          const { queue } = queryResult;\n          const isInQueue = queue.some(song => song.id === input.id);\n          const newQueue = isInQueue\n            ? queue.filter(song => song.id !== input.id)\n            : [...queue, input];\n          cache.writeQuery({\n            query: GET_QUEUED_SONGS,\n            data: { queue: newQueue }\n          });\n          return newQueue;\n        }\n        return [];\n      }\n    }\n  }\n});\n\nconst hasQueue = Boolean(localStorage.getItem(\"queue\"));\n\nconst data = {\n  queue: hasQueue ? JSON.parse(localStorage.getItem(\"queue\")) : []\n}\nclient.writeData({ data });\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}